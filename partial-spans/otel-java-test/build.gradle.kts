/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    `java-library`
    `maven-publish`
    id("application")
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://repo.jenkins-ci.org/public/")
    }

    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

dependencies {
    api(libs.io.opentelemetry.opentelemetry.api)
    api(libs.io.opentelemetry.opentelemetry.sdk)
    api(libs.io.opentelemetry.opentelemetry.exporter.otlp)
    api(libs.io.opentelemetry.opentelemetry.exporter.logging)
    api(libs.io.opentelemetry.opentelemetry.sdk.extension.autoconfigure)
    testImplementation(libs.org.junit.jupiter.junit.jupiter.api)
    testImplementation(libs.org.junit.jupiter.junit.jupiter.params)
}

group = "com.gross"
version = "1.0-SNAPSHOT"
description = "otel-java-test"
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}

application {
    // set the main class for the "run" task
    mainClass.set("com.gross.App")
}

tasks.jar {
    // Force including duplicates if they appear (you can change to EXCLUDE if desired)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    // Set the Main-Class in the manifest
    manifest {
        attributes["Main-Class"] = application.mainClass.get()
    }

    // Pull all runtime dependencies, and if a dependency is a .jar, unzip it into the jar
    from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })
}

